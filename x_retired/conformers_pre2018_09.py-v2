"""
Conformer generation.
https://github.com/skearnes/rdkit-utils/blob/master/rdkit_utils/conformers.py
2015-05-14
version 1.0
version 2.0 PMU -- changed some functions 19.03.21

## This is pre-RDKIT-2018.09. After that update, a newer and preferred method
## using ETKDG is available for conformer generation, which uses torsion angle
## preferences from Cambridge Structure Database (CSD) to correct conformers
## after distance geometry has been used to generate them. With this method,
## there should be no need to use a minimzation step to clean up the structures,
## making the conformer genration much faster.
"""

__author__ = "Steven Kearnes"
__copyright__ = "Copyright 2014, Stanford University"
__license__ = "3-clause BSD"

import numpy as np

from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import rdMolDescriptors
from rdkit.Chem.rdMolAlign import AlignMol

class ConformerGenerator(object):
    """
    Generate molecule conformers.
    Procedure
    ---------
    1. Generate a pool of conformers.
    2. Minimize conformers.
    3. Prune conformers using an RMSD threshold.
    Note that pruning is done _after_ minimization, which differs from the
    protocol described in the references.
    References
    ----------
    * http://rdkit.org/docs/GettingStartedInPython.html
      #working-with-3d-molecules
    * http://pubs.acs.org/doi/full/10.1021/ci2004658
    Parameters
    ----------
    max_conformers : int, optional (default 1)
        Maximum number of conformers to generate (after pruning).
    rmsd_threshold : float, optional (default 0.5)
        RMSD threshold for pruning conformers. If None or negative, no
        pruning is performed.
    force_field : str, optional (default 'uff')
        Force field to use for conformer energy calculation and
        minimization. Options are 'uff', 'mmff94', and 'mmff94s'.
    pool_multiplier : int, optional (default 10)
        Factor to multiply by max_conformers to generate the initial
        conformer pool. Since conformers are pruned after energy
        minimization, increasing the size of the pool increases the chance
        of identifying max_conformers unique conformers.
    """

    '''
        default conformer number based on no. rotatable bond
          rb >= 13      max_conformers = 300
          6 < rb <13    max_conformers = 200
          rb <= 6       max_conformers = 100
        override these settings if max_conformers > 0

        forcefield = uff,     use rmsd_threshold = .72
        forcefield = mmff94s, use rmsd_threshold = .67 (~2.5-3x shower)
        these rmsd_threshold values make the results closest to omega2
    '''
    def __init__(self, max_conformers=0, rmsd_threshold=0.72, 
                 force_field='uff', pool_multiplier=1.5):

        if rmsd_threshold is None or rmsd_threshold < 0:
            rmsd_threshold   = -1.

        self.max_conformers  = max_conformers
        self.rmsd_threshold  = rmsd_threshold
        self.force_field     = force_field
        self.pool_multiplier = pool_multiplier

    def __call__(self, inp):
        """
        Generate conformers for a molecule.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        """
        return self.generate_conformers(inp)


##########################################################################
    def generate_conformers(self, inp):
        """
        Generate conformers for a molecule.
        This function returns a copy of the original molecule with embedded
        conformers.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        """
        mol, name = inp
        mol.SetProp('_Name', name)
        # initial embedding
        mol, ids, num_max_conf = self.embed_molecule(mol)
        if not mol.GetNumConformers():
            msg = 'No conformers generated for molecule'
            if mol.HasProp('_Name'):
#                print( 'in prop')
                name = mol.GetProp('_Name')
                msg += ' "{}".'.format(name)
            else:
                msg += '.'
            raise RuntimeError(msg)
#        name = mol.GetProp('_Name')

        # minimization and pruning
        self.minimize_conformers(mol)
        # use user-defined maximum conformation number to prune conformers
        mol = self.prune_conformers(mol,num_max_conf)
#        print('prune_conformer:\t{0}\t{1}'.format(name,mol.GetNumConformers()))

#        return mol
        return [mol, name]

##########################################################################
    def embed_molecule(self, mol):
        """
        Generate conformers, possibly with pruning.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        """
        # adaptive max conformer to generate based on rotatable bond count
        # Ebjer/Morris/Deane, JCIM 2012.    (added by PMU)
        rb_num = rdMolDescriptors.CalcNumRotatableBonds(mol)
        if rb_num >= 13:
          num_max_conf = 300
        elif rb_num <= 2:
          num_max_conf = 50
        elif rb_num > 3 and rb_num < 6:
          num_max_conf = 100
        else:
          num_max_conf = 200
#        n_confs = self.max_conformers * self.pool_multiplier
        if self.max_conformers > 0: # enforce input conformer number 
          num_max_conf = self.max_conformers 

        mol    = Chem.AddHs(mol)  # add Hydrogens b4 generating conformers
        n_confs = int(num_max_conf * self.pool_multiplier)
        ids = AllChem.EmbedMultipleConfs(mol, numConfs=n_confs,
                                         pruneRmsThresh=-1.)
        return mol, list(ids), num_max_conf


##########################################################################
    def get_molecule_force_field(self, mol, conf_id=None, **kwargs):
        """
        Get a force field for a molecule.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        conf_id : int, optional
            ID of the conformer to associate with the force field.
        kwargs : dict, optional
            Keyword arguments for force field constructor.
        """
        if self.force_field == 'uff':
            ff = AllChem.UFFGetMoleculeForceField(
                mol, confId=conf_id, **kwargs)
        elif self.force_field.startswith('mmff'):
            AllChem.MMFFSanitizeMolecule(mol)
            mmff_props = AllChem.MMFFGetMoleculeProperties(
                mol, mmffVariant=self.force_field)
            ff = AllChem.MMFFGetMoleculeForceField(
                mol, mmff_props, confId=conf_id, **kwargs)
        else:
            raise ValueError("Invalid force_field " +
                             "'{}'.".format(self.force_field))
        return ff


##########################################################################
    def minimize_conformers(self, mol):
        """
        Minimize molecule conformers.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        """
        for idx, conf in enumerate(mol.GetConformers()):
            ff = self.get_molecule_force_field(mol, conf_id=conf.GetId())
            ff.Minimize()
#            if float(idx+1) % 10 == 0: print(str(idx+1))


##########################################################################
    def get_conformer_energies(self, mol):
        """
        Calculate conformer energies.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        Returns
        -------
        energies : array_like
            Minimized conformer energies.
        """
#        print( 'get_conformer_energies')
        energies = []
        for idx, conf in enumerate(mol.GetConformers()):
            ff = self.get_molecule_force_field(mol, conf_id=conf.GetId())
            energy = ff.CalcEnergy()
            energies.append(energy)
        energies = np.asarray(energies, dtype=float)
        return energies


##########################################################################
    def prune_conformers(self, mol, num_max_conf):
        """
        Prune conformers from a molecule using an RMSD threshold, starting
        with the lowest energy conformer.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        Returns
        -------
        A new RDKit Mol containing the chosen conformers, sorted by
        increasing energy.
        """
#        print( 'prune_conformers')
        if self.rmsd_threshold < 0 or mol.GetNumConformers() <= 1:
            return mol
        energies = self.get_conformer_energies(mol)
        rmsd = self.get_conformer_rmsd(mol)
#        print( 'get_conformer_rmsd')

        sort = np.argsort(energies)  # sort by increasing energy
        keep = []  # always keep lowest-energy conformer
        discard = []
        for i in sort:

            # always keep lowest-energy conformer
            if len(keep) == 0:
                keep.append(i)
                continue

            # discard conformers after max_conformers is reached
#            if len(keep) >= self.max_conformers:
            if len(keep) >= num_max_conf:
                discard.append(i)
                continue

            # get RMSD to selected conformers
            this_rmsd = rmsd[i][np.asarray(keep, dtype=int)]

            # discard conformers within the RMSD threshold
            if np.all(this_rmsd >= self.rmsd_threshold):
                keep.append(i)
            else:
                discard.append(i)

        # create a new molecule to hold the chosen conformers
        # this ensures proper conformer IDs and energy-based ordering
        new = Chem.Mol(mol)
        new.RemoveAllConformers()
        conf_ids = [conf.GetId() for conf in mol.GetConformers()]
        for i in keep:
            conf = mol.GetConformer(conf_ids[i])
            new.AddConformer(conf, assignId=True)
        return new


##########################################################################
    @staticmethod
    def get_conformer_rmsd(mol):
        """
        Calculate conformer-conformer RMSD.
        Parameters
        ----------
        mol : RDKit Mol
            Molecule.
        """
        rmsd = np.zeros((mol.GetNumConformers(), mol.GetNumConformers()),
                        dtype=float)
        for i, ref_conf in enumerate(mol.GetConformers()):
            for j, fit_conf in enumerate(mol.GetConformers()):
                if i >= j:
                    continue
#                rmsd[i, j] = AllChem.GetBestRMS(mol, mol, ref_conf.GetId(),
#                                                fit_conf.GetId())
#      GetBestRMS may go 'permutation explosion' for large molecules
                rmsd[i, j] = AlignMol(mol, mol, 
                                      ref_conf.GetId(), fit_conf.GetId(),
                                      maxIters=200)
#                print( 'xxx {0} {1} {2}'.format(i, j, rmsd[i, j]))
                rmsd[j, i] = rmsd[i, j]

        return rmsd
